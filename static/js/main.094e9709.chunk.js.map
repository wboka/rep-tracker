{"version":3,"sources":["ExercizeList.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["ExercizeList","_this$props","this","props","exercizeList","removeExercize","rows","map","row","index","react_default","a","createElement","key","logDate","toString","exercize","reps","className","onClick","Component","Form","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","_event$target","target","name","value","setState","defineProperty","addExercize","state","initialState","_this$state","type","id","onChange","moment","require","App","exercizes","Lockr","get","hasLocalStorage","window","previousState","newState","filter","_","i","updateDB","format","concat","toConsumableArray","set","src_Form","src_ExercizeList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.094e9709.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass ExercizeList extends Component {\r\n\trender() {\r\n\t\tconst { exercizeList, removeExercize } = this.props;\r\n\r\n\t\tconst rows = exercizeList.map((row, index) => {\r\n\t\t\treturn (\r\n\t\t\t\t<tr key={index}>\r\n\t\t\t\t\t<td>{row.logDate.toString()}</td>\r\n\t\t\t\t\t<td>{row.exercize}</td>\r\n\t\t\t\t\t<td>{row.reps}</td>\r\n\t\t\t\t\t<td>\r\n\t\t\t\t\t\t<button className=\"button is-danger is-rounded\" onClick={() => removeExercize(index)}>\r\n\t\t\t\t\t\t\tDelete\r\n\t\t\t\t\t\t</button>\r\n\t\t\t\t\t</td>\r\n\t\t\t\t</tr>\r\n\t\t\t);\r\n\t\t});\r\n\r\n\t\treturn (\r\n\t\t\t<table className=\"table is-fullwidth\">\r\n\t\t\t\t<thead>\r\n\t\t\t\t\t<tr>\r\n\t\t\t\t\t\t<th>Log Date</th>\r\n\t\t\t\t\t\t<th>Exercize</th>\r\n\t\t\t\t\t\t<th>Reps</th>\r\n\t\t\t\t\t\t<th>&nbsp;</th>\r\n\t\t\t\t\t</tr>\r\n\t\t\t\t</thead>\r\n\t\t\t\t<tbody>{rows}</tbody>\r\n\t\t\t</table>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default ExercizeList;\r\n","import React, { Component } from 'react';\r\n\r\nclass Form extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\r\n\t\tthis.initialState = {\r\n\t\t\texercize: '',\r\n\t\t\treps: ''\r\n\t\t};\r\n\r\n\t\tthis.state = this.initialState;\r\n\t}\r\n\r\n\thandleChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\taddExercize = () => {\r\n\t\tthis.props.addExercize(this.state);\r\n\t\tthis.setState(this.initialState);\r\n\t};\r\n\r\n\trender() {\r\n\t\tconst { exercize, reps } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<form>\r\n\t\t\t\t<label className=\"label\">Exercize</label>\r\n\t\t\t\t<input\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tclassName=\"input\"\r\n\t\t\t\t\tname=\"exercize\"\r\n\t\t\t\t\tid=\"exercize\"\r\n\t\t\t\t\tvalue={exercize}\r\n\t\t\t\t\tonChange={this.handleChange}\r\n\t\t\t\t/>\r\n\t\t\t\t<label className=\"label\">Reps</label>\r\n\t\t\t\t<input type=\"number\" className=\"input\" name=\"reps\" id=\"reps\" value={reps} onChange={this.handleChange} />\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<button type=\"button\" className=\"button is_rounded is-primary\" onClick={this.addExercize}>\r\n\t\t\t\t\tAdd Exercize\r\n\t\t\t\t</button>\r\n\t\t\t</form>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Form;\r\n","import React, { Component } from 'react';\nimport Lockr from 'lockr';\nimport './App.css';\nimport ExercizeList from './ExercizeList';\nimport Form from './Form';\nimport 'bulma';\n\nconst moment = require('moment');\n\nclass App extends Component {\n\tstate = {\n\t\texercizes: Lockr.get('exercizes') || [],\n\t\thasLocalStorage: 'localStorage' in window\n\t};\n\n\tremoveExercize = index => {\n\t\tthis.setState(previousState => {\n\t\t\tconst newState = previousState.exercizes.filter((_, i) => {\n\t\t\t\treturn i !== index;\n\t\t\t});\n\n\t\t\tthis.updateDB(newState);\n\n\t\t\treturn {\n\t\t\t\texercizes: newState\n\t\t\t};\n\t\t});\n\t};\n\n\taddExercize = exercize => {\n\t\texercize.logDate = moment().format('M/D/YYYY hh:mm a');\n\n\t\tthis.setState(previousState => {\n\t\t\tconst newState = [...previousState.exercizes, exercize];\n\n\t\t\tthis.updateDB(newState);\n\n\t\t\treturn {\n\t\t\t\texercizes: newState\n\t\t\t};\n\t\t});\n\t};\n\n\tupdateDB = newState => {\n\t\tLockr.set('exercizes', newState);\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1 className=\"is-size-1\">Rep Tracker</h1>\n\t\t\t\t{this.state.hasLocalStorage ? (\n\t\t\t\t\t<p>All data is stored locally on your device</p>\n\t\t\t\t) : (\n\t\t\t\t\t<p>Data will be lost on page refresh</p>\n\t\t\t\t)}\n\t\t\t\t<h2 className=\"is-size-2\">Add/Edit Exercize</h2>\n\t\t\t\t<Form addExercize={this.addExercize} />\n\t\t\t\t<hr />\n\t\t\t\t<h2 className=\"is-size-2\">My Exercizes</h2>\n\t\t\t\t<ExercizeList exercizeList={this.state.exercizes} removeExercize={this.removeExercize} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}